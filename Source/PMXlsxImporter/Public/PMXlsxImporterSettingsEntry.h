#pragma once

#include "CoreMinimal.h"
#include "PMXlsxImporterPythonBridge.h"
#include "PMXlsxImporterContextLogger.h"
#include "SourceControlHelpers.h"
#include "PMXlsxImporterSettingsEntry.generated.h"

USTRUCT(BlueprintType)
struct PMXLSXIMPORTER_API FPMXlsxImporterSettingsEntry
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, Config)
	FPrimaryAssetType DataAssetType;

	UPROPERTY(EditAnywhere, Config, meta = (RelativeToGameDir))
	FFilePath XlsxFile;

	// GetOptions calls GetWorksheetNames on this struct's outer UPMXlsxImporterSettings

	// Due to limitations in Unreal's GetOptions metadata, the dropdown for this field
	// may occasionally be incorrect. Change one of the settings in this entry to get it
	// to fix itself.
	UPROPERTY(EditAnywhere, Config, meta = (GetOptions="GetWorksheetNames"))
	FString WorksheetName;

	UPROPERTY(EditAnywhere, Config, meta = (RelativeToGameContentDir))
	FDirectoryPath OutputDir;

	// Create all autogenerated assets and also delete assets in the autogenerated folder that no longer exist
	// Does not import data from xlsx, only the existence or absence of each asset.
	// Data is imported in a separate step so that assets can be created, then point to each other.
	// Stops if InOutErrors.Num() >= MaxErrors
	void SyncAssets(FPMXlsxImporterContextLogger& InOutErrors, int32 MaxErrors) const;

	// Read XlsxFile and get each asset listed to parse its own data from strings
	void ParseData(FPMXlsxImporterContextLogger& InOutErrors, int32 MaxErrors) const;

	// Get each asset in XlsxFile to check if it has been set up correctly.
	// Do this after all asset data has been parsed in case validation of one DataAsset depends on another parsed DataAsset's data.
	void Validate(FPMXlsxImporterContextLogger& InOutErrors, int32 MaxErrors) const;

	FSourceControlState GetXlsxFileSourceControlState(bool bSilent = false) const;

#ifdef WITH_EDITOR
	// This is a struct, not a UObject-derived class. This function is called by the owning UPMXlsxImporterSettings
	// rather than directly from the Unreal editor.
	void PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent);
#endif

	TArray<FString> GetWorksheetNames() const;

private:

	// Gets a complete path in the format "C:/.../<ProjectName>/Content/<XlsxFile>"
	FString GetXlsxAbsolutePath() const;

	// Returns "/Game/<OutputDir>", which is the format required by UEditorAssetLibrary functions
	FString GetProjectRootOutputDir() const;
	// Returns "/Game/<OutputDir>/<AssetName>", which is the format required by UEditorAssetLibrary functions
	FString GetProjectRootOutputPath(const FString& AssetName) const;

	// AssetPath is from UEditorAssetLibrary::ListAssets, so format is "/Game/.../AssetName.AssetName"
	bool ShouldAssetExist(const FString& AssetPath, const TArray<FPMXlsxImporterPythonBridgeDataAssetInfo>& ParsedWorksheet) const;
};
